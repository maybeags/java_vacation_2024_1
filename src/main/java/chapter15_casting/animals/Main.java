package chapter15_casting.animals;
/*
    참조 자료형 캐스팅(Reference Type Casting)
        객체 지향 프로그래밍(OOP)에서 중요한 요소 중 하나로

        1. 정의 :
            Java에서의 자료형은 크게 두 가지로 구분되는데,
            1) 기본 자료형(Primitive Type) : int, double, char 등
            2) 참조 자료형(Reference Type) : 객체를 참조하는 변수로 클래스나 인터페이스로 생성된 객체

            참조 자료형 캐스팅은? -> 객체의 자료형은 변환하는 작업
            A a = new A();
            A a = new B();
                캐스팅 종류
                    1) 업캐스팅 : 하위 클래스의 객체를 상위 클래스 타입으로 변환
                    2) 다운캐스팅 : 상위 클래스 타입의 객체를 하위 클래스 타입으로 변환

                알아야 할 사항 : 연산자(Operator) instanceof -> 연산자 개념은 첫주 때 했는데
                    ex) 1 + 1 = 2에서 +가 연산자에 해당합니다.

        2. 업캐스팅 - 암시적(implicit)으로 이루어짐 -> 알아서 바뀌기는 함
            -> 다만 언제 알아서 바뀌었는지는 개발자가 파악할 필요가 있습니다.
        3. 다운캐스팅 - 명시적(explicit)으로 이루어짐 -> 반드시 개발자가
            적절한 장소와 시간대에 적용해줘야지만 합니다.

        4. 업캐스팅과 다운캐스팅의 활용
            캐스팅은 주로 다형성(Polymorphism)을 구현할 때 사용함. 상위 클래스 타입으로 객체를
            처리하면서도 특정 상황에서는 하위 클래스의 고유 기능을 사용할 수 있음.

        5. 캐스팅의 장단점
            장점 :
                코드 유연성 : 업캐스팅을 통해 '다양한 객체를 하나의 상위 클래스 타입으로 관리' 가능
                다형성 구현 : 메서드 오버라이딩과 함께 사용하면 코드의 재사용성을 높일 수 있음.

            단점 :
                다운 캐스팅의 위험성 : 잘못 다운 캐스팅을 하게 될 수 있습니다.
                    예를 들어, 상위 클래스 A와 하위 클래스 B, C가 있다고 가정했을 때,
                    B의 객체인 b를 A로 업캐스팅한 후, C로 다운캐스팅하는 문제가 생길 수 있어
                    주의가 필요함.

                복잡성 증가 : 코드 가독성이 떨어질 수 있음 -> 이렇게 바꿨다가 저렇게 바꿨다가 하기
                    때문인데 특히 업캐스팅의 경우 암시적으로 일어나기 때문에 어디서 바뀌었는지
                    확인 못하고 있다가 갑자기 다운캐스팅 튀어나와서 초심자들이 코드 읽는게 어려울 때가
                    있습니다.


 */
public class Main {
    public static void main(String[] args) {

    }
}
